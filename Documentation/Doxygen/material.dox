/**
\page material Material Plugins

In this section we will look at the details of setting up a plugin that implements a new constitutive formulation. The new material will be integrated seamlessly in FEBio's framework so that the user can take immediate advantage of additional functionality such as reading material parameters from the xml formatted FEBio input file, serialization to the restart archive, parameter optimization and more.

The basic procedure for creating a new material for FEBio requires the following steps.

1.	Defining a new material class by deriving it from an suitable base class.
2.	Registering the material with FEBio's framework.
3.	Defining the material parameters.
4.	Implementing the Init() and Validate() functions (optional)
5.	Defining a MaterialPoint structure (optional)
6.	Implementing the stress and tangent functions.

Next, the steps for the basic procedure will be discussed in more detail.

\section mat_sec1 Basic Procedure

\subsection step1 Defining the material base class

FEBio is written in C++ and therefore the new material implementation must be coded in C++ as well. Each material requires a separate class and hence the first step is to define a new class. The class has to be derived from one of the available material base classes. In this section it is assumed that the new material is derived from FEElasticMaterial. Materials that are derived from this base class will be materials that are used to describe isotropic, compressible solid materials. An example of such a material is the neo-Hookean material, which will be used as a case study in this section. The implementation of more advanced models will be discussed later, but they too have to follow most of the same steps.

The definition of the neo-Hookean material class looks as follows. Note that the actual implementation of this class might look a bit different in the code. Only the important aspects are touched upon here.

\code
class FENeoHookean : public FEElasticMaterial
{
public:
	// constructor
	FENeoHookean(FEModel*);

	// Cauchy-stress calculation
	mat3ds Stress(FEMaterialPoint& pt) override;

	// Spatial elasticity tensor calculation
	tens4ds Tangent(FEMaterialPoint& pt) override;

	// class initialization (optional)
	bool Init() override;

	// class validation (optional)
	bool Validate() override;

private:
	// material parameters
	FEParamDouble m_E;
	FEParamDouble m_v;

	// required macro for integrating this class with FECore
	DECLARE_FECORE_CLASS();
};
\endcode

The class derives, as expected, publicly from FEElasticMaterial. It then defines a constructor, which has to take the FEModel* parameter. Next, several functions are overridden in order to implement the specifics of the neo-Hookean material. Then, a list of material parameters is defined. Finally, at the end of the class definition, the required macro <b>DECLARE_FECORE_CLASS</b> is placed, which is needed as it is part of the process of integrating the plugin class with the framework. 

At this point it is useful to discuss a common practice in adding new classes in C++. Usually the definition of the class is split over two separate files. One file, the so-called header file, declares the new class. The implementation of the function members are placed in a separate file, usually a .cpp file. FEBio follows this practice and therefore the neo-Hookean implementation is spread over two files: the FENeoHookean.h  contains the class definition and FENeoHookean.cpp contains the member function definitions. It is recommended that the implementation of new materials follows this practice. 

\subsection step2 Registering the new material

In order for FEBio to recognize the new material, the material needs to be registered with the framework. In a plugin, this is done in the PluginInitialize function, which must be provided by the user. (see \ref register)

\code
FECORE_EXPORT void PluginInitialize(FECoreKernel& fecore)
{
	\\ Set the kernel to match FEBio's kernel
	FECoreKernel::SetInstance(&fecore);
	
	\\ Register the classes in this plugin
	REGISTER_FECORE_CLASS(FENeoHookean, "neo-Hookean");
}
\endcode

\subsection step3 Defining the material parameters

Defining the material parameters of the class requires two steps. First, variables need to be defined that will store the values for these parameters. In our example, the FENeoHookean class defines two parameters: m_E stores the Young's modulus and m_v stores the Poisson's ratio. The second step is to register the material parameters with FEBio's framework. A set of macros exist that will facilitate this process. The first one is placed in the class definition.

\code
DECLARE_FECORE_CLASS();
\endcode

This macro informs FEBio that this material class will be defining a set of material parameters. The actual
definition of the material parameter list is placed in the compilation unit (i.e. the .cpp file). In our
example, this list is found at the top of the FENeoHookean.cpp file.

\code
BEGIN_FECORE_CLASS(FENeoHookean, FEElasticMaterial);
	ADD_PARAMETER(m_E, FE_RANGE_GREATER(0.0), "E");
	ADD_PARAMETER(m_v, FE_RANGE_RIGHT_OPEN(-1, 0.5), "v");
END_FECORE_CLASS();
\endcode

The parameter list definition begins with the BEGIN_FECORE_CLASS macro, which takes two parameters: the name of the class, and the name of the base class. Next, for each parameter, the ADD_PARAMETER macro can be used to define it. This macro takes three parameters: the variable that will store the parameter's value, a range identifer, and a string name for the variable. 

The type of the parameter can be either a C++ built-in type (e.g. double, int, bool, std::vector) or any of the following special types. These types are preferred as they allow users to assign mathematical expressions or maps to the material parameters: 
\li <b>FEParamDouble</b> Define a mappable parameter of type double 
\li <b>FEParamVec3</b> Define a mappable parameter of type vec3d
\li <b>FEParamMat3d</b> Define a mappable parameter of type mat3d
\li <b>FEParamMat3ds</b> Define a mappable parameter of type mat3ds

The range identifier can be one of the following values.

\li FE_RANGE_DONT_CARE(): parameter can take on any value
\li FE_RANGE_GREATER(val): parameter must be greater than val.
\li FE_RANGE_GREATER_OR_EQUAL(val): parameter must be greater than or equal to val
\li FE_RANGE_LESS (val): parameter must be less than val
\li FE_RANGE_LESS_OR_EQUAL(val): parameter must be less than or equal to val
\li FE_RANGE_OPEN(min,max): parameter must be inside the open interval (min,max)
\li FE_RANGE_CLOSED(min,max): parameter must be inside the closed interval [min,max]
\li FE_RANGE_RIGHT_OPEN(min,max): parameter must be inside the right-open interval [min, max)
\li FE_RANGE_LEFT_OPEN(min,max): parameter must be inside the left-open interval (min, max]
\li FE_RANGE_NOT_EQUAL(val): parameter cannot equal val.

Defining the valid range of a variable helps FEBio to ensure that the value of the variable remains valid throughout the analysis. FEBio will check the range every time a parameter is changed (e.g. if the parameter defines a loadcurve then the value will be checked at the start of each time step). 

Currently, automatic range checking is only available for <c>double</c> and <c>int</c> parameters. It is ignored for all other parameters, including all mappable parameter types.

Finally, the parameter list must end with the END_FECORE_CLASS macro. Note that there a couple of more advanced options to define material parameters, such as vector parameters and load-curve controlled parameters. These will be discussed in the advanced section below.

\subsection constructor Implementing the constructor
The constructor requires some special attention. It is always needed since it needs to pass the FEModel* parameter that it receives to the base class. 

\code
FENeoHookean::FENeoHookean(FEModel* fem) : FEElasticMaterial(fem) 
{
	m_E = 0.0;
	m_v = 0.0;
}
\endcode

In addition, all member variables should be initialized in the constructor. Note that in this example the material parameters are of type FEParamDouble. The easiest way to initialize a parameter of this type is by assigning a value of type double. 

\subsection step4 Implementing the Init function

When implementing a new material class the user has the option to override the base class implementation of the Init function. This function is called during model initialization and can be used to allocate any data the class may require. In our example, this function is not necessary but is provided simply as an example. It is important to always call the base class as well.

\code
bool FENeoHookean::Init()
{
	// call the base-class first!
	if (FEElasticMaterial::Init() == false) return false;
	
	// Do additional initialization here
	
	return true;
}
\endcode

\subsection step4b Implementing the Validate function
The Validate function is called whenever the values of the material parameters have changed. By default, FEBio will use the ranges defined in the material parameter definitions to validate materials so for most material implementation this function doest not have to be defined. However, if the material requires additional validation then the user should override the <c>Validate</c> member. Again, make sure to always call the base class version. 

\code
bool FENeoHookean::Validate()
{
	// call base class first!
	if (FEElasticMaterial::Validate() == false) return false;
	
	// Do additional parameter validation here
	
	return true;
}
\endcode

The Validate function should also be implemented when class members depend on material parameters. Since material parameters can change during an analysis (e.g. via a load curve), then all dependent parameters must be updated as well. 

\subsection step5 Implementing the stress and tangent functions

Next follows the most important aspect of the implementation: the declaration of the stress and tangent functions. These functions will describe the physical reaction of this material to an applied deformation. Note that FEBio works in the spatial frame. This implies that the stress function needs to return the Cauchy stress and the tangent function needs to return the spatial elasticity tensor.

The stress function is defined as follows in the material class definition (i.e. the header file). 

\code
mat3ds stress(FEMaterialPoint& pt) override;
\endcode

This function takes one parameter of type FEMaterialPoint. This parameter stores all the important information about the point at which to calculate the stress value. For example, this variable stores the reference and current location of the point, the local deformation gradient, history variables (if defined) and much more. It also defines a bunch of useful functions that can facilitate the implementation of the stress function, such as a function that calculates the left and right Cauchy-Green tensors. There is a lot to say about this class, but in order not to digress, a detailed explanation of this class is postponed and only a few important aspects of it are mentioned here. 

The actual definition of the stress function is, as usual, placed in the compilation unit. In our example, this is the FENeoHookean.cpp file.

\code
mat3ds FENeoHookean::Stress(FEMaterialPoint& mp)
{
 FEElasticMaterialPoint& pt =  mp.ExtractData<FEElasticMaterialPoint>();

 mat3d &F = pt.F;
 double detF = pt.J;
 double detFi = 1.0/detF;
 double lndetF = log(detF);

  // calculate left Cauchy-Green tensor
  mat3ds b = pt.LeftCauchyGreen();

  // evaluate material parameters at current material point
  double E = m_E(mp);
  double v = m_v(mp);
 
  // lame parameters
  double lam = v*E/((1+v)*(1-2*v));
  double mu  = 0.5*E/(1+v);
 
  // Identity
  mat3dd I(1);
 
  // calculate stress
  mat3ds s = (b - I)*(mu*detFi) + I*(lam*lndetF*detFi);
 
  return s;
 }
\endcode

Although the detailed implementation of this constitutive model will not be explained, a few important points are noted. 

The FEMaterialPoint contains all the data that is defined at this particular material point. (The material points can be any point in the material, but typically are the element integration points when evaluating the FE integrals.) The first line, then extracts the component of the material point data that we need here: 

\code
FEElasticMaterialPoint& pt =  mp.ExtractData<FEElasticMaterialPoint>();
\endcode

Materials can define their own material point data classes and extract them in a similar way from the FEMaterialPoint parameter. However, in this case, the FEElasticMaterialPoint, which is defined by the FEElasticMaterial base class provides all the data we need. 
 
Next, the local deformation gradient is accessed from the material point data, as well as the local Jacobian (which is the determinant of the deformation gradient ). These are data members that can be accessed directly. 

\code
 mat3d &F = pt.F;
 double detF = pt.J;
\endcode

The FEElasticMaterialPoint class has some useful member functions to calculate commonly needed tensors (e.g. left and right Cauchy-Green tensors.) Here, the left Cauchy-Green tensor is retrieved using the LeftCauchyGreen member function. A more detailed description of the available data and function members can be found in the advanced section. 

\code
  mat3ds b = pt.LeftCauchyGreen();
\endcode

Next, the material parameters are evaluated at the current material point. 

\code
  double E = m_E(mp);
  double v = m_v(mp);
\endcode

After all the necessary tensors are evaluated, the stress can be calculated. FEBio defines a large number of classes that facilitate the use of tensors. For example, the mat3ds class implements a second-order 3D symmetric tensor of doubles (the d stands for double). The mat3dd class implements a second-order 3D diagonal tensor.  We will see some examples of fourth-order tensor classes in the tangent function. These tensors classes make it easy to implement otherwise complicate tensorial expressions. 

\code
 mat3ds s = (b - I)*(mu*detFi) + I*(lam*lndetF*detFi);
\endcode

Finally, the calculated stress value at the current material point. Note that the variable returned is of type mat3ds, that is, a symmetric second-order tensor. 

The tangent function is declared in the class definition as well.

\code
tens4ds Tangent(FEMaterialPoint& pt) override;
\endcode

This function too takes a single FEMaterialPoint variable as input. Note that in this case the return value is of type tens4ds which is a class that implements a fourth-order tensor with major and minor symmetries. The definition of the function can be found in the FENeoHookean.cpp file.

\code
tens4ds FENeoHookean::Tangent(FEMaterialPoint& mp)
{
   FEElasticMaterialPoint& pt = *mp.ExtractData<FEElasticMaterialPoint>();

	// deformation gradient
	mat3d &F = pt.F;
	double detF = pt.J;

	// evaluate material parameters at current material point
	double E = m_E(mp);
	double v = m_v(mp);

	// lame parameters
	double lam = v*E/((1+v)*(1-2*v));
	double mu  = 0.5*E/(1+v);

	double lam1 = lam / detF;
	double mu1  = (mu - lam*log(detF)) / detF;

	mat3dd I(1);
	tens4ds IxI = dyad1s(I);
	tens4ds I4 = dyad4s(I);

	return IxI*lam1 + I4*(2*mu1);
}
\endcode

First, the data of the material point data that pertains to elastic materials is extracted. The next few lines extract some data from the FEElasticMaterialPoint variable and calculate some other parameters, similarly to the evaluation of the stress. 

Next, several tensor are evaluated that are need for the material tangent. Note the use of the fourth-order tensor class tens4ds. This code snippet also illustrates the use of the dyadic products to create fourth-order tensors from second-order tensors. A more detailed explanation of the use of the tensor classes can be found in chapter 3 of the FEBio Theory Manual.

\code
	mat3dd I(1);
	tens4ds IxI = dyad1s(I);
	tens4ds I4 = dyad4s(I);
\endcode

The next section takes a closer look at the FEMaterialPoint class. 

\section mat_sec2 The FEMaterialPoint class

As was shown above, the stress and tangent are evaluated at so-called material points. These are points at which the state of the deformation is tracked. Most often, these points correspond to the integration points of the elements. 

The FEMaterialPoint class contains all the data that is stored at the material points. Material classes can append additional data to this class as is described below in one of the advanced topics. Here, we'll take a look at the FEMaterialPoint class itself. 

The FEMaterialPoint class contains the following member variables that may be useful in the evaluation of the stress and tangent. 

\li vec3d m_r0: the position of the material point in the reference frame
\li vec3d m_rt: the position of the material point in the spatial frame

Note that the jacobians, are the jacobians of the transformation from the isoparametric space to the reference or current spatial frames. (These are not the derivates of the deformation gradient!)

The FEMaterialPoint class also contains a linked list of FEMaterialPointData classes, which hold the additional data needed by specific material implementations. One particular FEMaterialPointData class that we've encountered above is the FEElasticMaterial class, which holds additional data relevant for hyperelastic materials. 

The FEElasticMaterialPoint class defines the state of an elastic material point, or more precisely, the state of a material derived from the FEElasticMaterial class. It defines the following additional state variables.

\li mat3d m_F: the deformation gradient
\li double m_J: the Jacobian, that is the determinant of the deformation gradient
\li mat3ds m_s: the Cauchy stress tensor

If your material derives from FEElasticMaterial (or FEUncoupledMaterial) and no additional state data is required, you do not need to derive a new material point class. For all elastic materials this is the default material point data class to store the point data. 

A note of caution on the stress member variable. Usually the stress is evaluated before the tangent, so you could use the FEElasticMaterialPoint::m_s member in the evaluation of the tangent if needed. However, it is often safer to re-evaluate the stress in the tangent function than relying on the value of m_s. In fact, it is recommended that this member variable should not be accessed when evaluating the Stress and Tangent functions. 

This FEElasticMaterialPoint class also defines some useful functions that can facilitate the implementation of stress and tangent functions. 

\li Strain: Calculate the Euler-Lagrange strain tensor.
\li RightCauchyGreen: Calculate the right Cauchy-Green strain tensor.
\li RightCauchyGreen: Calculate the left Cauchy-Green strain tensor.
\li DevRightCauchyGreen: Calculate the deviatoric right Cauchy-Green tensor.
\li DevLeftCauchyGreen: Calculate the deviatoric left Cauchy-Green tensor.
\li pull_back: Calculate the pull-back of a 2nd order tensor.
\li push_back: Calculates the push-back of a tensor. Two versions are defined. One for 2nd order symmetric tensors, and one for 4th order symmetric tensors.

For materials that require additional information to be stored at the material points (e.g. history-dependent materials) a new material point data class needs to be defined, by deriving from the FEMaterialPointData class. 

\section mat_sec3 Using the new material class

If the steps to register the material and its material parameters have been followed as outlined in the previous sections, the material class will be seamlessly integrated in FEBio's framework. One of the important consequences of this is that the xml-input file reader will automatically recognize the new material and its parameters. For example, imagine the user created a new class MyFancyMaterial and named it "fancy material" by registering the material as follows. 

\code
REGISTER_FECORE_CLASS(MyFancyMaterial, "fancy material");
\endcode

This macro associates the name "fancy material" with the MyFancyMaterial class. This name will now be used as the type identifier in the xml-input file.

\code
<material id="1" type="fancy material">
	...
</material>
\endcode

FEBio will recognize the type identifier as the name of the MyFancyMaterial class and will create an instance of this class. For all the elements in the mesh that have the material ID of this class (in this case "1"), the stress and tangent functions of the new class will be automatically called.

Material parameters are identified in a similar way. For each material parameter, the ADD_PARAMETER macro associates a name with the parameter. For example, imagine that for our new class MyFancyMaterial the following parameter is defined,

\code
ADD_PARAMETER(m_a, "a");
\endcode

The user can now enter a value for this parameter in the FEBio input file as follows,

\code
<material id="1" type="fancy material">
	<a>0.123</a>
</material>
\endcode

FEBio will now automatically read the value (here 0.123) and store it in the m_a variable which will be defined as a public member variable of the MyFancyMaterial class.

\section mat_sec4 Testing the Material Implementation

Implementing a new material formulation can be tricky sometimes. Particularly the implementation of the correct tangent stiffness is often quite challenging. For this reason, FEBio offers a few tools that can help in diagnosing a new material implementation.

First, it is highly recommended to use the available tensor classes to implement the stress and tangent stiffness of the material. These classes allow the user to stay as true as possible to the mathematical formulation, facilitating the readability of the code. Obvious mistakes, such as sign errors, will therefore be relatively easy to spot by direct comparison of the code with the mathematical equations. 

\subsection tangent_diagnostic The Tangent Diagnostic

FEBio offers a tangent diagnostic tool that allows the user a more direct inspection of the tangent implementation. The tool basically compares the actual implementation of the tangent with an approximation that is obtained by calculating the finite difference of the residual. To run the diagnostic, a separate FEBio input file needs to be defined. An example for the neo-Hookean material follows.

\code
<?xml version="1.0"?>
<febio_diagnostic type="tangent test">
		<Control>
			<time_steps>1</time_steps>
  		<step_size>1</step_size>
  		<plot_level>PLOT_DEFAULT</plot_level>
		</Control>
		<Scenario type="uni-axial">
			<strain>0.15</strain>
 		</Scenario>
 		<Material>
 			<material id="1" name="Solid" type="neo-Hookean">
 				<E>1</E>
 				<v>0.45</v>
 			</material>
 		</Material>
 </febio_diagnostic>
\endcode

The diagnostics input file also takes an xml-formatted input file and is structured similarly as the FEBio input file. The first line is the xml declaration as required by the xml standard. The next line defines the root element of the xml format. In this case, it is defined as febio_diagnostics to indicate that this file is a diagnostics file. The name attribute identifies the type of diagnostic this file describes, and in this case this is a "tangent test". Next follows the definition of the three sections of the file.

The first section, the Control section, defines some general control settings such as the number of timesteps, time step size and so on. 

The second section, the Scenario section, defines the type of model and boundary conditions to apply. This section replaces the geometry section in the usual FEBio input file. The geometry is now defined implicitly through the scenario. The uni-axial scenario runs a simple uni-axial tension or compression problem on a unit cube. The maximum strain level can be defined through the strain parameter. 

The third section defines the material that will be assigned to the model. In the uni-axial scenario, only one material needs to be defined with the corresponding material parameters. Note that when the material class is properly registered with the framework as explained above, no additional steps need to be taken to use the tangent diagnostics feature aside from creating the diagnostics input file for the new material.

To run the tangent diagnostic, simply type the following at the command prompt.

\code
>febio -d filename
\endcode

Note that the command option -d needs to be used instead of the usual -i to inform FEBio that you are running a diagnostics problem and not a regular model. Replace "filename" with the name of the actual input file.

This diagnostic test outputs a log file that contains the tangent stiffness as calculated from the implementation and a finite difference approximation to this tangent. It also contains the difference between these two matrices and the matrix element where the difference is largest. Although a small difference between the two matrices can be expected due to the finite difference approximation, the difference should be small, e.g. less than 0.01%. If this is not the case, there is probably a mistake in either the Stress function or in the Tangent function or both. To identify the culprit, the result of the simulation, which is reported as usual in the plot file, can be compared to a known solution (or a solution obtained in a different fashion). If the solutions correspond, then the problem most likely lies with the tangent implementation. If the solutions do not agree, then the implementation of the Cauchy stress is probably also erroneous. 

\subsection secant_tangent Secant Tangent
For particularly complex constitutive models the derivation of the tangent can be a daunting task. For this reason, there is an option that evaluates the tangent using an secant approximation. 

In order to use the secant tangent approximation, override the UseSecantTangent() and have it return true: 

\code
bool UseSecantTangent() override { return true; }
\endcode

When this function returns true, FEBio will not call the Tangent member (which does need to be defined, but can be left empty), but instead use an approximation. 

Keep in mind that the secant tangent is just an approximation and may not result in an accurate representation of the actual material tangent. The consequence of this could be poor convergence or even failure to converge. In general it is best to calculate and implement the consistent material tangent, but the secant approximation might be a good place to start. 

\section mat_sec5 Advanced Topics

\subsection subsec61 Array parameters

It is possible to define an array of parameters using a single material parameter declaration. This can be done by first defining a member variable as an array in the class definition. For example, imagine that the new material class has the following variable declared.

\code
double	m_a[3];
\endcode

To define the variable m_a as the storage for a material parameter, specify the size of the array as the second argument. For example,

\code
ADD_PARAMETER(m_a, 3, "a");
\endcode

In the input file, the parameter's values can then be defined using a comma-separated list. For example,

\code
<a>0.1, 0.23, -0.73</a>
\endcode

There is no limitation on the size of array parameters. Currently, the only types that are supported for array parameters are int and double. 

\subsection subsec62 Uncoupled Materials

Incompressible materials are an important class of materials since they are dealt with in a very particular manner. FEBio assumes that such materials use a decoupled hyperelastic strain energy function.

\f[
	W(\mathbf{C})=\tilde{W}(\tilde{\mathbf{C}})+U(J)
\f]

Here, \f$\mathbf{C}\f$ is the right Cauchy-Green tensor, \f$\tilde{\mathbf{C}}\f$ is the deviatoric right Cauchy-Green tensor and J is the Jacobian. Since the incompressibility constraint can sometimes be hard to enforce for these materials with the usual displacement formulation of FE, a different formulation is used. FEBio uses a three-field formulation that requires a separate integration rule for the dilatational stiffness contribution. We refer to the FEBio theory manual for a more detailed description of the theory of incompressible hyperelasticity. As a consequence of the different formulation, incompressible materials require a few changes to the basic procedure.

First, incompressible materials using a decoupled strain energy function, need to be derived from the base class FEUncoupledMaterial. An example of such a class is the FEMooneyRivlin material. This class is defined as follows.

\code
class FEMooneyRivlin : public FEUncoupledMaterial
{
	//	...
};
\endcode

The second important difference relates to the calculation of the stress. For a material with an uncoupled strain energy function, the stress is given by,

\f[
	\mathbf{\sigma} = p\mathbf{I}+\frac{2}{J}\text{dev}(\mathbf{\tilde{F}}\frac{\partial W}{\partial C}\mathbf{\tilde{F}}^{T})
\f]

The pressure p is calculated by FEBio. The only thing that the material class needs to implement is the second term. This must be done in the DevStress member function which is inherited from FEUncoupledMaterial. For example, for the Mooney-Rivlin material, the stress is calculated as follows.

\code
mat3ds FEMooneyRivlin::DevStress(FEMaterialPoint& mp)
{
		FEElasticMaterialPoint& pt = *mp.ExtractData<FEElasticMaterialPoint>();
		...
		mat3ds T = B*(W1 + W2*I1) - B2*W2;

		return T.dev()*(2.0/J);
}
\endcode

Similarly, the elasticity tensor requires a slightly different form. It can be shown that it can be decomposed as follows.

\subsection subsec63 User-defined material points

In the previous sections we touched briefly on the concept of material points. In this section we will elaborate on this important topic and discuss how it can be used to add additional material point data, e.g. for use in history-dependent materials. 

A material point is a point in the material at which the state is stored. Usually these correspond to the integration points of the elements. The state of the material at this point is defined by the position, the deformation gradient, the stress and so forth. 

The FEMaterialPoint class (defined in FEMaterialPoint.h) contains a linked list of classes derived from FEMaterialPointData. The linked list is populated by the materials as described below, and materials can extract particular data classes using the ExtractData member of the FEMaterialPoint class. For example, we already saw above how to extract the FEElasticMaterialPoint data. 

\code
	FEElasticMaterialPoint& pt = *mp.ExtractData<FEElasticMaterialPoint>();
\endcode

If your material requires storing additional data, then you will need to create your own material point data class. This is the case, for instance, if your material is history dependent. A visco-elastic material is a good example and we'll use it as an example. 

To define additional material data, one would need to first derive a new material point class from the FEMaterialPoint data base class. 

\code
class FEViscoElasticMaterialPoint : public FEMaterialPointData
{
public:
	enum { MAX_TERMS = 6 };

public:
	//! constructor
	FEViscoElasticMaterialPoint(FEMaterialPointData* mp = nullptr);

	//! copy material point data
	FEMaterialPointData* Copy();

	//! Initialize material point data
	void Init();

	//! Update material point data
	void Update(const FETimeInfo& timeInfo);

	//! Serialize data to archive
	void Serialize(DumpStream& ar);

public:
	mat3ds	m_Se;	//!< elastic PK2 stress
	mat3ds	m_Sep;	//!< elastic 2nd PK stress at previous time

	mat3ds	m_H[MAX_TERMS];		//!< internal variables
	mat3ds	m_Hp[MAX_TERMS];	//!< internal variables at previous timestep

    double  m_alpha[MAX_TERMS];     //!< exponent of right-stretch tensor in series spring
    double  m_alphap[MAX_TERMS];    //!< alpha at previous time step
    
	double	m_sed;	//!< elastic strain energy density
	double	m_sedp;	//!< elastic strain energy density at previous time
};
\endcode

The class inherits from FEMaterialPointData, defines several member variables that record the material point's state, and overrides several functions. The following functions should be defined: 

\li Constructor: initialize all the class' member variables. 
\li Copy: return a copy of this material point class
\li Init: initialize all the class' member variables. This function is called during a model reset, and the class should reset its default state. 
\li Update: This is called at the start of a new time step, and the class can use this to update its internal state. 
\li Serialize: Data should be stored and retrieved when the dumpstream is being written, read respectively. This is to ensure that the material works properly with FEBio's running and cold restart capabilities. 

After defining the custom material point, it needs to be allocated and appended to the data linked list of each material point that belongs to this material. Much of this is handled by the framework, but the only thing that needs to be done is override and implement the CreateMaterialPointData class in the new material class. 

\code
	FEMaterialPointData* CreateMaterialPointData() override;
\endcode

For the viscoelastic material example above, this function is defined in FEViscoElasticMaterial. 

\code
FEMaterialPointData* FEViscoElasticMaterial::CreateMaterialPointData()
{
	return new FEViscoElasticMaterialPoint(m_Base->CreateMaterialPointData());
}
\endcode

The viscoelastic material defines a property, stored in the m_Base member, which can also store material point data. Therefore, the CreateMaterialPointData of this member needs to be called. Material properties are discussed in the next section. 

Finally, to use the custom material point data, just call the ExtractData member function of the FEMaterialPoint class. 

\code
mat3ds FEViscoElasticMaterial::Stress(FEMaterialPoint& mp)
{
	FEViscoElasticMaterialPoint& pt = *mp.ExtractData<FEViscoElasticMaterialPoint>();
}
\endcode

\subsection subsec64 Material Properties

In FEBio, materials can define material properties. A material property is different in a few ways from material parameters. Most importantly, a material property is defined by a pointer to a base class. The explicit class that is allocated and assigned will not be known until runtime. For example, the biphasic material requires a "solid" material property and a "permeability" material property. But which particular solid material or permeability is needed will be decided by the user in the FEBio input file. 

Consider for example the following class:

\code
class MyViscoMaterial : public FEElasticMaterial
{
public:
	MyViscoMaterial(FEModel* pfem);
	
	mat3ds Stress(FEMaterialPoint& mp);
	
	tens4ds Tangent(FEMaterialPoint& mp);
	
protected:
	\\ Define the solid material property
	FEElasticMaterial*	m_Solid;
};
\endcode

Aside from the usual stuff (constructor, stress, tangent functions), it defines a variable, named m_Solid, of type FEElasticMaterial* that represents the solid phase of the visco-elastic material. 

You can now turn this variable into a property of the material by defining it in the class descriptor using the ADD_PROPERTY macro. 

\code
BEGIN_FECORE_CLASS(MyViscoMaterial, FEElasticMaterial)
	ADD_PROPERTY(m_Solid, "solid");
END_FECORE_CLASS();
\endcode

This adds a property  with the name "solid" to the property list of the material. The name is used in the input file for defining the solid property. 
A specific solid material can be created using the <c>type</c> attribute. A definition for this new material will look like this. (Assuming the new material was registered under the name "my_visco").

\code
<material id="1" type="my_visco">
	<solid type="neo-Hookean">
		<E>1.0</E>
		<v>0.3</v>
	</solid>
</material>
\endcode

The viscoelastic material is an example of a <i>nested material</i> class. This is a solid material that uses other solid materials as member variables. In this case, the properties will typically variables of type FEElasticMaterial or FEUncoupledMaterial. 

In general, properties can be created from most FECore base classes. For the purpose of materials, the FEMaterialProperty base class might be a good place to start, aside from nested materials. One important reason to derive material properties from this class is that is facilitates accessing the local material orientation. 

For example, the permeability property of the biphasic material is defined as follows. 

\code
class FEBIOMIX_API FEHydraulicPermeability : public FEMaterialProperty
{
public:
	FEHydraulicPermeability(FEModel* pfem) : FEMaterialProperty(pfem) {}
    
	//! hydraulic permeability
	virtual mat3ds Permeability(FEMaterialPoint& pt) = 0;
    
	//! tangent of hydraulic permeability with respect to strain
	virtual tens4dmm Tangent_Permeability_Strain(FEMaterialPoint& mp) = 0;
    
	//! tangent of hydraulic permeability with respect to concentration
	mat3ds Tangent_Permeability_Concentration(FEMaterialPoint& mp, const int isol);

	FECORE_BASE_CLASS(FEHydraulicPermeability);
};
\endcode

Note that this function is a virtual base class and the expectation is that particular permeability models are implemented in derived classes. This will be the typical case for material properties: Create an abstract base class from FEMaterialProperty, and then implement specific functionality by deriving from the abstract base class. 

In order to use material properties, they need to be registered with the framework in the same way as the material classes (and other plugin classes) themselves. (i.e. using the REGISTER_FECORE_CLASS in the PluginInitialize function.)

To use a particular material property in an FEBio model, use the type attribute followed by the name that the particular property was registed with. 

\code
<material id="1" type="biphasic">
	<solid type="neo-Hookean">
		<!-- solid material parameters -->
	</solid>
	<permeability type="const">
		<!-- permeability parameters -->
	</permeability>
</material>
\endcode

*/
