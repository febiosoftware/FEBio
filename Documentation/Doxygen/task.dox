/**
\page task Task Plugins

In this section we will look at the details of creating a task plugin. A task executes the main loop in FEBio. For example, the default task simply calls the FEModel::Solve to solve the forward model. Another example is the optimization solver, which is implemented as a task and solves the FEModel repeatedly as part of a parameter optimization problem. 

Custom task plugins give the user the very powerful capability to control exactly what FEBio does. Task plugins are often useful for coupling FEBio to other codes. Again, the optimization task is a great example since it couples FEBio to an optimization library (e.g. levmar). 

In order to create a new task plugin, you must implement the following.

1. Create a new task class, derived from the FECoreTask base class.
2. Implement the virtual Init(const char*) member function do perform any initialization.
3. Implement the virtual Run() member function.
4. Register the task with the framework. 

In the next section, we will discuss these steps in more detail.

\section task_sec1 Creating a Task Plugin

\subsection task_sec11 Create the Task Class

The first step is to create a new task class, derived from the FECoreTask base class, defined in FECore\FECoreTask.h. This class must implement a constructor and
the Run member function.

\code
class MyTask : public FECoreTask
{
public:
	MyTask(FEModel* pfem);
	
	bool Init(const char* szfile) override;
	
	bool Run() override;
}
\endcode

The constructor MyTask takes a pointer to the current active FEModel.

The \c Init member function performs any initialization that the task may require. This function should at least call FEModel::Init to initialize the FEModel data.

The \c Run member function will then be called by FEBio and hands over control to the task.

\subsection task_sec12 Implement the Init function

This function is called by FEBio after the FEBio input file was read (if one was provided on the command line). In this function, the task can initialize any data it may need, as well as make any changes to the FEModel. It receives one input argument, namely a string. The string can define, for instance, the name of a control file or provide additional control parameters. 

This function should at least call the FEModel::Init function to initialize the model data. If any changes to the FEModel are made, this function should be called after these changes. Once FEModel::Init is called, a task should not add to or remove any model components to the FEModel.

\code
bool MyTask::Init(const char* szfile)
{
	// get the FE model
	FEModel* fem = GetFEModel();

	// make any changes necessary to the model

	// then, initialize the model
	return fem->Init();
}
\endcode

\subsection task_sec13 Implement the Run function
After FEBio is done initializing the model data, it will call the selected task's Run function and passes the main execution loop to the task.

Inside the Run() function, the task can execute the code that implements the task. After completing, the Run() function must return a boolean indicating whether the task was executed
successfully (true) or not (false). 

\subsection task_sec14 Registering the task

As with any plugins, the task class must be registered with the framework. This is done in the PluginInitialize() function, which is one of the required functions that each plugin needs to define. In this function, the REGISTER_FECORE_CLASS macro can be used to register the task. 

\code
REGISTER_FECORE_CLASS(MyTask, "mytask");
\endcode

\section task_sec2 Running a Task plugin
In order to use a task plugin you must first register the plugin with the framework in the usual manner (i.e. implementing the required plugin functions and 
adding the plugin filename to the FEBio configuration file). Then, you must specify the name of the task on the command line when running FEBio.

\code{.unparsed}
>febio -i file.feb -task="mytask" data.txt
\endcode

Notice that the model input file is still required and defined with the -i command. FEBio will read the input file before the \c Init member function is called.
The -task command line option specifies which task FEBio needs to execute. The task's name is specified after the equal sign (=). The task command can be followed by an optional string. This string will be passed to the task plugin as a parameter to the Init() member function.

*/
