/**
\page plugin_log Accessing the FEBio Log file
By default FEBio writes all output to a log file. More precisely, it uses the Logfile class which writes to both the standard output as well as to a file. FEBio also
provides special macros that can be used to write to the log file, whithout the need to know the specifics of how the logging mechanism works. 

In order to access the FEBio log file, you must call the FECoreKernel::SetInstance during the PluginInitialize function. 

\code
FECORE_EXPORT void PluginInitialize(FECoreKernel& febio)
{
	FECoreKernel::SetInstance(&febio);
}
\endcode

This ensures that the plugin and FEBio use the same kernel and consequently the same resources (e.g. the logfile). 

Writing to the logfile can be done by including the file <FECore\log.h> and using the log macros.

\code
#include <FECore/log.h>
\endcode

It is important to understand that a log file is associated with each model. 

For classes derived from FECoreBase, you can use the following macros in any member function. 

The <c>feLog</c> macro works just like the c printf function and can be used to write formatted text to the screen and the log file. 

\code
feLog("A negative Jacobian was detected at integration point %d of element %d", 1, 123);
\endcode

For producing a warning or an error message, you can use the following two macros. The message will be shown in a box with a title. 

\code
feLogInfo("This will print a message to the screen.");
feLogWarning("This will print a warning to the screen.");
feLogError("This will print an error message to the screen.");
\endcode

For debugging, you can use the feLogDebug function. This will only print to the output when the user runs a model in debug mode (e.g. -g was added as a command line option.)

\code
feLogDebug("A debug message is written only when the user runs in debug mode.")
\endcode

For classes that do not inherit from FECoreBase, or in non-member functions, you must use the extended macros, which take a pointer to the FEModel as its first argument. 

\code
FEModel* fem;
FELogEx(fem, "So far, things are looking good.");
FELogDebugEx(fem, "Hmm, should this happen?");
FELogWarningEx(fem, "Oh oh, that shouldn't happen.");
FELogErrorEx(fem, "Exit the building! Now!!");
\endcode
*/
